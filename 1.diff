diff --git a/rosen/modules/render_service_client/core/pipeline/rs_render_thread_visitor.cpp b/rosen/modules/render_service_client/core/pipeline/rs_render_thread_visitor.cpp
index 81a036a80ca8b5bd0b4bc3647491af478a5943ea..7309d98fdb1f1551111430d3f39bccc9fbe88760 100644
--- a/rosen/modules/render_service_client/core/pipeline/rs_render_thread_visitor.cpp
+++ b/rosen/modules/render_service_client/core/pipeline/rs_render_thread_visitor.cpp
@@ -60,11 +60,36 @@ void RSRenderThreadVisitor::PrepareBaseRenderNode(RSBaseRenderNode& node)
     }
 }
 
+bool RSRenderThreadVisitor::IsValidRootRenderNode(RSRootRenderNode& node)
+{
+    auto ptr = RSNodeMap::Instance().GetNode<RSSurfaceNode>(node.GetRSSurfaceNodeId());
+    if (ptr == nullptr) {
+        ROSEN_LOGE("ccc No valid RSSurfaceNode id");
+        return false;
+    }
+    if (!node.enableRender_) {
+        ROSEN_LOGI("ccc RootNode %s: Invisible", ptr->GetName().c_str());
+        return false;
+    }
+    if (node.GetSurfaceWidth() <= 0 || node.GetSurfaceHeight() <= 0) {
+        ROSEN_LOGE("ccc Root %s: Negative width or height [%d %d]", ptr->GetName().c_str(),
+            node.GetSurfaceWidth(), node.GetSurfaceHeight());
+        return false;
+    }
+    return true;
+}
+
 void RSRenderThreadVisitor::PrepareRootRenderNode(RSRootRenderNode& node)
 {
     if (isIdle_) {
         curDirtyManager_ = node.GetDirtyManager();
         curDirtyManager_->Clear();
+        // After the node calls applymodifiers, the modifiers assign the renderProperties to the node
+        // Otherwise node.GetSurfaceHeight always less than 0, causing black screen
+        // node.ApplyModifiers();
+        // if(!IsValidRootRenderNode(node)){
+        //     return;
+        // }
         dirtyFlag_ = false;
         isIdle_ = false;
         PrepareCanvasRenderNode(node);
@@ -201,17 +226,7 @@ void RSRenderThreadVisitor::ProcessRootRenderNode(RSRootRenderNode& node)
         return;
     }
     auto ptr = RSNodeMap::Instance().GetNode<RSSurfaceNode>(node.GetRSSurfaceNodeId());
-    if (ptr == nullptr) {
-        ROSEN_LOGE("ProcessRoot: No valid RSSurfaceNode id");
-        return;
-    }
-    if (!node.enableRender_) {
-        ROSEN_LOGI("ProcessRoot %s: Invisible", ptr->GetName().c_str());
-        return;
-    }
-    if (node.GetSurfaceWidth() <= 0 || node.GetSurfaceHeight() <= 0) {
-        ROSEN_LOGE("ProcessRoot %s: Negative width or height [%d %d]", ptr->GetName().c_str(),
-            node.GetSurfaceWidth(), node.GetSurfaceHeight());
+    if(!IsValidRootRenderNode(node)){
         return;
     }
 
diff --git a/rosen/modules/render_service_client/core/pipeline/rs_render_thread_visitor.h b/rosen/modules/render_service_client/core/pipeline/rs_render_thread_visitor.h
index 9726a6ccbb8a0d1e5bccb93de6b4a9bf62eae5fd..0aa34437c4bb230033b8bb3ac89335d73b4f5611 100644
--- a/rosen/modules/render_service_client/core/pipeline/rs_render_thread_visitor.h
+++ b/rosen/modules/render_service_client/core/pipeline/rs_render_thread_visitor.h
@@ -66,6 +66,7 @@ private:
     SkMatrix parentSurfaceNodeMatrix_;
 
     void SendCommandFromRT(std::unique_ptr<RSCommand>& command, NodeId nodeId, FollowType followType);
+    bool IsValidRootRenderNode(RSRootRenderNode& node);
 };
 } // namespace Rosen
 } // namespace OHOS
