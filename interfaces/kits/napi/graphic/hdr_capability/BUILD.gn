# Copyright (c) 2023-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")

platform = current_os
if (current_os == "mingw") {
  platform = "windows"
}

config("hdr_capability_object_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "$graphic_2d_root/interfaces/kits/napi/graphic/hdr_capability/hdr_capability_utils",
    "$graphic_2d_root/rosen/modules/render_service_base/include",
  ]
}

template("hdr_capability_utils_source_set") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    sources = [ "hdr_capability_utils/js_hdr_format_utils.cpp" ]

    include_dirs = [ "$hilog_root/interfaces/native/innerkits/include" ]
    configs = [
      ":hdr_capability_object_config",
      "$arkui_root/napi:ace_napi_config",
    ]

    cflags_cc = [ "-std=c++17" ]
    part_name = "graphic_2d"
    subsystem_name = "graphic"
  }
}

hdr_capability_utils_source_set("hdr_capability_utils_source") {
}

if (current_os == "ohos") {
  ohos_shared_library("hdr_capability_utils") {
    public_deps = [ ":hdr_capability_utils_source" ]
    external_deps = [
      "hilog:libhilog",
      "napi:ace_napi",
    ]
    innerapi_tags = [ "platformsdk" ]
    part_name = "graphic_2d"
    subsystem_name = "graphic"
  }
} else {
  ohos_source_set("hdr_capability_utils") {
    public_deps = [ ":hdr_capability_utils_source" ]
    deps = [ "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base" ]
    part_name = "graphic_2d"
    subsystem_name = "graphic"
  }
}

config("hdr_capability_napi_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "$graphic_2d_root/interfaces/kits/napi/graphic/hdr_capability/hdr_capability_utils",
    "$graphic_2d_root/interfaces/kits/napi/graphic/hdr_capability/hdr_capability_napi",
    "$graphic_2d_root/rosen/modules/render_service_base/include",
  ]
}

template("hdr_capability_napi_source_set") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    sources = [
      "hdr_capability_napi/hdr_capability_module.cpp",
      "hdr_capability_napi/js_hdr_capability.cpp",
    ]

    include_dirs = [ "$hilog_root/interfaces/native/innerkits/include" ]
    configs = [
      ":hdr_capability_napi_config",
      "$arkui_root/napi:ace_napi_config",
    ]
    cflags_cc = [ "-std=c++17" ]
    part_name = "graphic_2d"
    subsystem_name = "graphic"
  }
}

hdr_capability_napi_source_set("hdr_capability_napi_source") {
}

if (current_os == "ohos") {
  ohos_shared_library("hdr_capability_napi") {
    public_deps = [ ":hdr_capability_napi_source" ]
    external_deps = [
      "hilog:libhilog",
      "napi:ace_napi",
    ]
    deps = [
      ":hdr_capability_utils",
      "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
    ]
    relative_install_dir = "module/graphics"
    part_name = "graphic_2d"
    subsystem_name = "graphic"
  }
} else {
  ohos_source_set("hdr_capability_napi") {
    public_deps = [ ":hdr_capability_napi_source" ]
    deps = [
      ":hdr_capability_utils",
      "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
    ]
    part_name = "graphic_2d"
    subsystem_name = "graphic"
  }
}
