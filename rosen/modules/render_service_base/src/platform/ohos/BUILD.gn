# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/graphic/graphic/graphic_config.gni")

group("ohos") {
  public_deps = [ ":rosen_ohos_sources" ]
}

config("export_config") {
  include_dirs = [
    "//foundation/graphic/graphic/rosen/include",
    "//foundation/graphic/graphic/rosen/modules/composer/vsync/include",
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "//foundation/graphic/graphic/frameworks/surface/src",
    "//foundation/graphic/graphic/rosen/modules/2d_graphics/src",
    "//foundation/graphic/graphic/rosen/modules/2d_graphics/include",
    "//foundation/multimedia/image_standard/interfaces/innerkits/include",
  ]
}

ohos_source_set("rosen_ohos_sources") {
  public_configs = [ ":export_config" ]

  defines = [ "ROSEN_OHOS" ]
  defines += gpu_defines

  sources = [
    "backend/rs_surface_frame_ohos_raster.cpp",
    "backend/rs_surface_ohos_raster.cpp",
    "rs_log.cpp",
    "rs_render_service_client.cpp",
    "rs_render_service_connect_hub.cpp",
    "rs_render_service_connection_proxy.cpp",
    "rs_render_service_proxy.cpp",
    "rs_surface_frame_ohos.cpp",
    "rs_surface_ohos.cpp",
    "rs_surface_ohos_converter.cpp",
    "rs_system_properties.cpp",
    "rs_vsync_client_ohos.cpp",
  ]

  if (ace_enable_gpu) {
    sources += [
      "backend/rs_surface_frame_ohos_gl.cpp",
      "backend/rs_surface_ohos_gl.cpp",
    ]

    sources += [ "//foundation/graphic/graphic/rosen/modules/2d_graphics/src/render_context/render_context.cpp" ]
  }

  include_dirs = [
    "//foundation/graphic/graphic/rosen/modules/render_service_base/include",
    "//foundation/graphic/graphic/rosen/modules/render_service_base/src",
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "//foundation/graphic/graphic/prebuilts/librarys/gpu/include",
    "//drivers/peripheral/display/interfaces/include/",
    "//foundation/graphic/graphic/rosen/modules/render_service_client/core",
  ]

  public_deps = [
    "//foundation/arkui/ace_engine/build/external_config/flutter/skia:ace_skia_ohos",
    "//foundation/graphic/graphic:libsurface",
    "//foundation/graphic/graphic:libvsync_client",
    "//foundation/graphic/graphic/rosen/modules/composer/vsync:libvsync",
    "//foundation/graphic/graphic/utils:sync_fence",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//utils/native/base:utils",
  ]

  if (ace_enable_gpu) {
    public_deps += [ "//foundation/graphic/graphic:libgl" ]
  }

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr_standard:samgr_proxy",
    "init:libbegetutil",
  ]
}
