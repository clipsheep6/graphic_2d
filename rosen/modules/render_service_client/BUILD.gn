# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")
import("render_service_client.gni")

config("render_service_client_config") {
  include_dirs = [
    "$rosen_root/modules",
    "$rosen_root/modules/render_service_client/core",
    "$rosen_root/modules/render_service_base/include",
    "//foundation/graphic/graphic_2d/interfaces/inner_api/common",
    "//foundation/graphic/graphic_2d/interfaces/inner_api/surface",
    "//foundation/graphic/graphic_2d/interfaces/inner_api/composer",
    "//drivers/peripheral/display/interfaces/include",
    "//drivers/peripheral/base",
  ]
}

ohos_source_set("render_service_client_src") {
  defines = []
  defines += gpu_defines
  include_dirs = [
    "core",
    "$rosen_root/modules/render_service_base/src",
    "$rosen_root/modules/2d_graphics/src",
    "//foundation/graphic/utils/log",
    "//foundation/graphic/graphic_2d/utils/log",
    "//foundation/graphic/graphic_2d/interfaces/inner_api/surface",
  ]

  sources = [
    #animation
    "core/animation/rs_animation.cpp",
    "core/animation/rs_animation_callback.cpp",
    "core/animation/rs_animation_group.cpp",
    "core/animation/rs_animation_timing_curve.cpp",
    "core/animation/rs_curve_animation.cpp",
    "core/animation/rs_implicit_animation_param.cpp",
    "core/animation/rs_implicit_animator.cpp",
    "core/animation/rs_implicit_animator_map.cpp",
    "core/animation/rs_keyframe_animation.cpp",
    "core/animation/rs_path_animation.cpp",
    "core/animation/rs_spring_animation.cpp",
    "core/animation/rs_transition.cpp",

    #jank_detector
    "core/jank_detector/rs_jank_detector.cpp",

    #pipeline
    "core/pipeline/overdraw/rs_cpu_overdraw_canvas_listener.cpp",
    "core/pipeline/overdraw/rs_gpu_overdraw_canvas_listener.cpp",
    "core/pipeline/overdraw/rs_listened_canvas.cpp",
    "core/pipeline/overdraw/rs_overdraw_controller.cpp",
    "core/pipeline/rs_node_map.cpp",
    "core/pipeline/rs_render_thread.cpp",
    "core/pipeline/rs_render_thread_visitor.cpp",

    #transaction
    "core/transaction/rs_application_agent_impl.cpp",
    "core/transaction/rs_interfaces.cpp",
    "core/transaction/rs_render_thread_client.cpp",
    "core/transaction/rs_transaction.cpp",

    #ui
    "core/ui/rs_base_node.cpp",
    "core/ui/rs_canvas_node.cpp",
    "core/ui/rs_display_node.cpp",
    "core/ui/rs_node.cpp",
    "core/ui/rs_root_node.cpp",
    "core/ui/rs_surface_extractor.cpp",
    "core/ui/rs_surface_node.cpp",
    "core/ui/rs_ui_director.cpp",
  ]

  cflags = [
    "-Wall",
    "-Wno-pointer-arith",
    "-Wno-non-virtual-dtor",
    "-Wno-missing-field-initializers",
    "-Wno-c++11-narrowing",
    "-fvisibility=hidden",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fvisibility-inlines-hidden",
  ]

  deps = []

  deps += [
    "//base/startup/syspara_lite/interfaces/innerkits/native/syspara:syspara",
    "//base/startup/syspara_lite/interfaces/innerkits/native/syspara:syspara_watchagent",
    "//foundation/graphic/graphic_2d/rosen/modules/frame_analyzer:libframe_analyzer",
  ]

  if (rss_enabled) {
    deps += [
      "//foundation/resourceschedule/resource_schedule_service/ressched/interfaces/innerkits/ressched_client:ressched_client",
      "//third_party/jsoncpp:jsoncpp",
    ]
  }

  if (enable_export_macro) {
    defines += [ "ENABLE_EXPORT_MACRO" ]
  }

  if (rss_enabled) {
    defines += [ "OHOS_RSS_CLIENT" ]
  }

  external_deps = [
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "startup_l2:syspara",
  ]
  public_deps =
      [ "$rosen_root/modules/render_service_base:librender_service_base" ]
}

ohos_shared_library("librender_service_client") {
  public_deps = [
    ":render_service_client_src",
    "//third_party/flutter/build/skia:ace_skia_ohos",
  ]

  public_configs = [ ":render_service_client_config" ]

  part_name = "graphic_graphic_2d"
  subsystem_name = "graphic"
}

group("test") {
  testonly = true

  deps = [ "test:test" ]
}
