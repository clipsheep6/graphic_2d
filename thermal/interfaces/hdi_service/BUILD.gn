# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/ohos.gni")
import("//drivers/adapter/uhdf2/uhdf.gni")

ohos_shared_library("libthermal_interface_service") {
  include_dirs = [
    "//drivers/adapter/uhdf2/include/hdi",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "//drivers/peripheral/sensor/interfaces/include/",
    "include",
    "//third_party/libxml2/include",
  ]
  sources = [
    "src/base_info_config.cpp",
    "src/sensor_info_config.cpp",
    "src/thermal_device_mitigation.cpp",
    "src/thermal_hdf_config.cpp",
    "src/thermal_hdf_timer.cpp",
    "src/thermal_interface_service.cpp",
    "src/thermal_simulation_node.cpp",
    "src/thermal_zone_manager.cpp",
  ]

  deps = [
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/host:libhdf_host",
    "$hdf_uhdf_path/ipc:libhdf_ipc_adapter",
    "//drivers/adapter/uhdf2/utils:libhdf_utils",
    "//drivers/peripheral/thermal/interfaces/hdi/thermal/v1_0:libthermal_stub",
    "//third_party/libxml2:xml2",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  subsystem_name = "hdf"
  part_name = "thermal_device_driver"
}

##############################################################################################

ohos_shared_library("libthermal_driver") {
  include_dirs = [
    "//drivers/adapter/uhdf2/include/hdi",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "//drivers/peripheral/sensor/interfaces/include/",
  ]
  sources = [ "src/thermal_interface_driver.cpp" ]

  deps = [
    "//drivers/adapter/uhdf2/utils:libhdf_utils",
    "//drivers/peripheral/thermal/interfaces/hdi/thermal/v1_0:libthermal_stub",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  subsystem_name = "hdf"
  part_name = "thermal_device_driver"
}

group("hdf_thermal") {
  if (target_cpu == "arm") {
    deps = [
      ":libthermal_driver",
      ":libthermal_interface_service",
      "profile:thermal_hdf_config",
    ]
  }
}
