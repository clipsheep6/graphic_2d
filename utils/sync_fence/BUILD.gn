# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")

## Build sync_fence.so {{{
config("sync_fence_config") {
  visibility = [ ":sync_fence" ]

  cflags = [
    "-Wall",
    "-Werror",
    "-g3",
    "-Wno-error=missing-braces",
    "-Wno-error=#warnings",
  ]
}

config("sync_fence_public_config") {
  include_dirs = [
    "export",
    "//commonlibrary/c_utils/base/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits",
    "//base/notification/eventhandler/interfaces/inner_api",
    "//foundation/graphic/graphic_2d/utils/log",
  ]
}

ohos_shared_library("sync_fence") {
  if (!use_clang_android && !use_clang_ios) {
    sanitize = {
      cfi = true
      debug = false
    }
  }
  sources = [
    "src/sync_fence.cpp",
    "src/sync_fence_timeline.cpp",
    "src/sync_fence_tracker.cpp",
  ]

  configs = [ ":sync_fence_config" ]

  public_configs = [ ":sync_fence_public_config" ]

  if (use_mingw_win) {
    defines = graphic_decode_windows_defines
    configs +=
        [ "//foundation/graphic/graphic_2d/mock:graphic_mock_hitrace_config" ]
    public_deps = [
      "//commonlibrary/c_utils/base:utils",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_eventhandler",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_ipc",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_log",
    ]
  } else if (use_clang_mac) {
    defines = graphic_decode_mac_defines
    configs +=
        [ "//foundation/graphic/graphic_2d/mock:graphic_mock_hitrace_config" ]
    public_deps = [
      "//commonlibrary/c_utils/base:utils",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_eventhandler",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_ipc",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_log",
    ]
  } else if (use_clang_ios) {
    defines = graphic_decode_ios_defines
    configs +=
        [ "//foundation/graphic/graphic_2d/mock:graphic_mock_hitrace_config" ]
    public_deps = [
      "//commonlibrary/c_utils/base:utils",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_eventhandler",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_ipc",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_log",
    ]
  } else if (use_clang_android) {
    defines = graphic_decode_android_defines
    configs +=
        [ "//foundation/graphic/graphic_2d/mock:graphic_mock_hitrace_config" ]
    public_deps = [
      "//commonlibrary/c_utils/base:utils",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_eventhandler",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_ipc",
      "//foundation/graphic/graphic_2d/mock:graphic_mock_log",
    ]
  } else {
    public_deps = [
      "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
      "//commonlibrary/c_utils/base:utils",
    ]
    external_deps = [
      "eventhandler:libeventhandler",
      "hitrace_native:hitrace_meter",
      "ipc:ipc_core",
    ]
  }

  part_name = "graphic_standard"
  subsystem_name = "graphic"
}

group("test") {
  testonly = true

  deps = [ "test:test" ]
}
## Build sync_fence.so }}}
